//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SapSoapCardWriter.GUI.NakCardService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NakCardService.INakCardService")]
    public interface INakCardService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/ValidateUser", ReplyAction="http://tempuri.org/INakCardService/ValidateUserResponse")]
        SapSoapCardWriter.BusinessLogic.SapService.LoginData ValidateUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/ValidateUser", ReplyAction="http://tempuri.org/INakCardService/ValidateUserResponse")]
        System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.LoginData> ValidateUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/GetCardData", ReplyAction="http://tempuri.org/INakCardService/GetCardDataResponse")]
        SapSoapCardWriter.BusinessLogic.SapService.CardData GetCardData(string userName, string password, string rfid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/GetCardData", ReplyAction="http://tempuri.org/INakCardService/GetCardDataResponse")]
        System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.CardData> GetCardDataAsync(string userName, string password, string rfid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/ReportSuccess", ReplyAction="http://tempuri.org/INakCardService/ReportSuccessResponse")]
        void ReportSuccess(string userName, string password, string rfid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/ReportSuccess", ReplyAction="http://tempuri.org/INakCardService/ReportSuccessResponse")]
        System.Threading.Tasks.Task ReportSuccessAsync(string userName, string password, string rfid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/GetEvents", ReplyAction="http://tempuri.org/INakCardService/GetEventsResponse")]
        SapSoapCardWriter.BusinessLogic.SapService.EventData[] GetEvents(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/GetEvents", ReplyAction="http://tempuri.org/INakCardService/GetEventsResponse")]
        System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.EventData[]> GetEventsAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/RegisterCardToEvent", ReplyAction="http://tempuri.org/INakCardService/RegisterCardToEventResponse")]
        SapSoapCardWriter.BusinessLogic.SapService.CardEventRegistrationData RegisterCardToEvent(string userName, string password, SapSoapCardWriter.BusinessLogic.SapService.EventData eventData, string rfid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INakCardService/RegisterCardToEvent", ReplyAction="http://tempuri.org/INakCardService/RegisterCardToEventResponse")]
        System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.CardEventRegistrationData> RegisterCardToEventAsync(string userName, string password, SapSoapCardWriter.BusinessLogic.SapService.EventData eventData, string rfid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INakCardServiceChannel : SapSoapCardWriter.GUI.NakCardService.INakCardService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NakCardServiceClient : System.ServiceModel.ClientBase<SapSoapCardWriter.GUI.NakCardService.INakCardService>, SapSoapCardWriter.GUI.NakCardService.INakCardService {
        
        public NakCardServiceClient() {
        }
        
        public NakCardServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NakCardServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NakCardServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NakCardServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SapSoapCardWriter.BusinessLogic.SapService.LoginData ValidateUser(string userName, string password) {
            return base.Channel.ValidateUser(userName, password);
        }
        
        public System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.LoginData> ValidateUserAsync(string userName, string password) {
            return base.Channel.ValidateUserAsync(userName, password);
        }
        
        public SapSoapCardWriter.BusinessLogic.SapService.CardData GetCardData(string userName, string password, string rfid) {
            return base.Channel.GetCardData(userName, password, rfid);
        }
        
        public System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.CardData> GetCardDataAsync(string userName, string password, string rfid) {
            return base.Channel.GetCardDataAsync(userName, password, rfid);
        }
        
        public void ReportSuccess(string userName, string password, string rfid) {
            base.Channel.ReportSuccess(userName, password, rfid);
        }
        
        public System.Threading.Tasks.Task ReportSuccessAsync(string userName, string password, string rfid) {
            return base.Channel.ReportSuccessAsync(userName, password, rfid);
        }
        
        public SapSoapCardWriter.BusinessLogic.SapService.EventData[] GetEvents(string userName, string password) {
            return base.Channel.GetEvents(userName, password);
        }
        
        public System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.EventData[]> GetEventsAsync(string userName, string password) {
            return base.Channel.GetEventsAsync(userName, password);
        }
        
        public SapSoapCardWriter.BusinessLogic.SapService.CardEventRegistrationData RegisterCardToEvent(string userName, string password, SapSoapCardWriter.BusinessLogic.SapService.EventData eventData, string rfid) {
            return base.Channel.RegisterCardToEvent(userName, password, eventData, rfid);
        }
        
        public System.Threading.Tasks.Task<SapSoapCardWriter.BusinessLogic.SapService.CardEventRegistrationData> RegisterCardToEventAsync(string userName, string password, SapSoapCardWriter.BusinessLogic.SapService.EventData eventData, string rfid) {
            return base.Channel.RegisterCardToEventAsync(userName, password, eventData, rfid);
        }
    }
}
